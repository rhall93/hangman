#include "unit_test.h"


Status test_init_default_returns_nonNULL(char* buffer, int length)
{
   MY_STRING hString = NULL;

   hString = my_string_init_default();

   if(hString == NULL)
   {
      my_string_destroy(&hString);
      strncpy(buffer, "test_init_default_returns_nonNULL\n"
                   "my_string_init_default returns NULL\n", length);
      return FAILURE;
   }
   else
   {
      my_string_destroy(&hString);
      strncpy(buffer, "\ttest_init_default_returns_nonNULL\n", length);
      return SUCCESS;
   }
}

Status test_get_size_on_init_default_returns_0(char* buffer, int length)
{
   MY_STRING hString = NULL;
   Status status;

   hString = my_string_init_default();

   if(my_string_get_size(hString) != 0)
   {
      status = FAILURE;
      printf("Expected a size of 0 but got %d\n", my_string_get_size(hString));
      strncpy(buffer, "test_get_size_on_init_default_returns_0\n"
                   "Did not receive 0 from get_size after init_default\n", length);
   }
   else
   {
      status = SUCCESS;
      strncpy(buffer, "test_get_size_on_init_default_returns_0\n", length);
   }

   my_string_destroy(&hString);
   return status;
}

Status test_init_c_string_length_is_strlength(char* buffer, int length)
{
   MY_STRING hString = NULL;
   Status status;

   hString = my_string_init_c_string("hello");

   if(my_string_get_size(hString) != strlen("hello"))
   {
      status = FAILURE;
      strncpy(buffer, "test_init_c_string_length_is_strlength\n"
                        "my_string_init_c_string length does not match length of string\n", length);
   }

   else
   {
      status = SUCCESS;
      strncpy(buffer, "test_init_c_string_length_is_strlength\n", length);
   }

   my_string_destroy(&hString);
   return status;
}

Status test_get_capacity_returns_capacity(char* buffer, int length)
{
   MY_STRING hString = NULL;
   Status status;
   int n;

   hString = my_string_init_c_string("Y");
   n = my_string_get_capacity(hString);

   if(n != 2)
   {
      status = FAILURE;
      strncpy(buffer, "test_get_capacity_returns_capacity\n"
               "my_string_get_capacity does not return the correct capacity\n", length);
   }
   else
   {
      status = SUCCESS;
      strncpy(buffer, "test_get_capacity_returns_capacity\n", length);
   }

   my_string_destroy(&hString);
   return status;
}

Status test_get_size_returns_size(char* buffer, int length)
{
   MY_STRING hString = NULL;
   Status status;
   int n;

   hString = my_string_init_c_string("Y");
   n = my_string_get_size(hString);

   if(n != 1)
   {
      status = FAILURE;
      strncpy(buffer, "test_get_size_returns_size\n"
               "my_string_get_size does not return the correct size\n", length);
   }
   else
   {
      status = SUCCESS;
      strncpy(buffer, "test_get_size_returns_size\n", length);
   }

   my_string_destroy(&hString);
   return status;

}

Status test_get_data_returns_nonNULL(char* buffer, int length)
{
   MY_STRING hString = NULL;
   Status status;
   char *ch;

   hString = my_string_init_c_string("hello");
   ch = my_string_get_data(hString);

   if(ch == NULL)
   {
      status = FAILURE;
      strncpy(buffer, "test_get_data_returns_nonNULL\n"
                        "my_string_get_data returns NULL\n", length);
   }
   else
   {
      status = SUCCESS;
      strncpy(buffer, "test_get_data_returns_nonNULL\n", length);
   }

   my_string_destroy(&hString);
   return status;

}

Status test_compare_returns_0_for_equal_strings(char* buffer, int length)
{
   MY_STRING hString1 = NULL;
   MY_STRING hString2 = NULL;
   Status status;
   int num;

   hString1 = my_string_init_c_string("hello");
   hString2 = my_string_init_c_string("hello");

   num = my_string_compare(hString1, hString2);

   if(num != 0)
   {
      status = FAILURE;
      strncpy(buffer, "test_compare_returns_0_for_equal_strings\n"
                        "my_string_compare doesn't returns 0 for equal strings\n", length);
   }
   else
   {
      status = SUCCESS;
      strncpy(buffer, "test_compare_returns_0_for_equal_strings\n", length);
   }

   my_string_destroy(&hString1);
   my_string_destroy(&hString2);
   return status;
}

Status test_compare_returns_less_than_0_if_first_string_is_bigger(char* buffer, int length)
{
   MY_STRING hString1 = NULL;
   MY_STRING hString2 = NULL;
   Status status;
   int num;

   hString1 = my_string_init_c_string("hello!");
   hString2 = my_string_init_c_string("hello");

   num = my_string_compare(hString1, hString2);

   if(num >= 0)
   {
      status = FAILURE;
      strncpy(buffer, "test_compare_returns_greater_than_0_if_first_string_is_bigger\n"
                        "my_string_compare doesn't return greater than 0 if first string is bigger\n", length);
   }
   else
   {
      status = SUCCESS;
      strncpy(buffer, "test_compare_returns_greater_than_0_if_first_string_is_bigger\n", length);
   }

   my_string_destroy(&hString1);
   my_string_destroy(&hString2);
   return status;
}

Status test_compare_returns_greater_than_0_if_first_string_is_smaller(char* buffer, int length)
{
   MY_STRING hString1 = NULL;
   MY_STRING hString2 = NULL;
   Status status;
   int num;

   hString1 = my_string_init_c_string("hello");
   hString2 = my_string_init_c_string("hello!");

   num = my_string_compare(hString1, hString2);

   if(num <= 0)
   {
      status = FAILURE;
      strncpy(buffer, "test_compare_returns_less_than_0_if_first_string_is_smaller\n"
                        "my_string_compare doesn't return less than 0 when first string is smaller\n", length);

   }
   else
   {
      status = SUCCESS;
      strncpy(buffer, "test_compare_returns_less_than_0_if_first_string_is_smaller\n", length);
   }

   my_string_destroy(&hString1);
   my_string_destroy(&hString2);
   return status;

}
